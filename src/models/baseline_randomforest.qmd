---
title: "Baseline- Random Forest"
author: "Jason Dude"
format: 
  html:
    self-contained: true
editor: visual
editor_options: 
  chunk_output_type: console
---

## Setup

```{r}
#| warning: false
#| message: false

library(themis)
library(tidymodels)
library(tidyverse)

# ggplot themeing
theme_set(
  theme(
    text = element_text(size = 16)
  )
)

# read imputed training set
df_train <- readRDS("../../data/processed/train_set_imputed.RDS")

# specify file name of model
file_name <- "baseline-randomforest-mtry30-trees20-10foldcv"
```

## Modeling with tidymodels

```{r}
# check if we've already created this model; if so read it in
out <- file.path("../../models", paste0(file_name, ".RDS"))
if (file.exists(out)) {
  wf_res <- readRDS(out)
  
} else {
 # recipe of formula specification and preprocessing steps
  rec <- df_train %>% 
    recipe(X1Yr_Death ~ ., data = .) %>% 
    update_role(Patient_ID, new_role = "ID") %>% 
    step_center(all_numeric_predictors()) %>% 
    step_scale(all_numeric_predictors()) %>% 
    step_downsample(X1Yr_Death)  
  
  # specify model and backend
  mod <- rand_forest(
    mode = "classification",
    engine = "ranger",
    mtry = 30,
    trees = 10
  )
  
  # combine recipe and model by using a workflow
  wf <- workflow() %>% 
    add_recipe(rec) %>% 
    add_model(mod)
  
  # use 10-fold CV to fit model to data
  folds <- vfold_cv(df_train, v = 10)
  cntrl_opts <- control_resamples(save_pred = TRUE, save_workflow = TRUE)
  
  # fit model
  wf_res <- fit_resamples(wf, resamples = folds, control = cntrl_opts)
  
  # save
  saveRDS(wf_res, file.path("../../models", paste0(file_name, ".RDS"))) 
}
```

## Results

```{r}
#| fig-width: 10
#| fig-height: 8

# collect preds across folds
wf_preds <- wf_res %>% collect_predictions()

# accuracy and AUC
collect_metrics(wf_res)

# best fit metrics
print(
  rbind(
    f_meas(wf_preds, X1Yr_Death, .pred_class, event_level = "second"),
    mcc(wf_preds, X1Yr_Death, .pred_class)
  )
)

# confusion matrix
wf_preds %>% 
  conf_mat(truth = X1Yr_Death, estimate = .pred_class) %>% 
  autoplot(cm, type = "heatmap") %>% 
  print()

# roc curve
wf_preds %>% 
  roc_curve(X1Yr_Death, .pred_False) %>%
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 3) +
  coord_equal() +
  theme_bw()

# predicted probabilities
wf_preds %>% 
  ggplot(aes(.pred_True, fill = X1Yr_Death)) +
  geom_histogram(bins = 50, col = "black") +
  xlab("Probability of True (mortality)") +
  ylab("Count") +
  ggtitle("Distribution of predictions")
```
